module.exports = {
  parser: '@typescript-eslint/parser',
  env: {
    jest: true,
    es6: true,
    node: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  parserOptions: {
    ecmaVersion: 2018,
    project: './tsconfig.eslint.json',
    sourceType: 'module',
  },
  extends: [
    'plugin:import/typescript',
    'plugin:prettier/recommended',
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@moneteam/nestjs/recommended',
  ],
  plugins: [
    '@typescript-eslint',
    'prettier',
    'simple-import-sort',
    'import',
    'unicorn',
    'sonarjs',
    '@moneteam/nestjs',
  ],
  rules: {
    'prettier/prettier': [
      'off',
      { singleQuote: true, trailingComma: 'all', tabWidth: 2, bracketSpacing: true },
    ],
    /**
     * plugin:import
     */
    'import/export': 'off',
    'import/first': 'off',
    'import/no-unresolved': 'off',
    'import/named': 'off',
    'import/namespace': 'off',
    'import/no-duplicates': 'off',
    'import/no-relative-packages': 'off',
    'import/newline-after-import': 'off',
    'import/no-absolute-path': 'off',
    'import/no-default-export': 'off',
    'import/no-self-import': 'off',
    'import/no-deprecated': 'off',
    'import/no-cycle': 'off',
    'import/no-unused-modules': 'off',
    // 'import/no-namespace': 'off',
    'import/extensions': ['off', 'never'],
    'import/no-useless-path-segments': [
      'off',
      {
        noUselessIndex: true,
      },
    ],
    'import/no-internal-modules': 'off',
    'import/order': 'off',
    /**
     * plugin:sonarjs
     */
    'sonarjs/cognitive-complexity': 'off',
    'sonarjs/elseif-without-else': 'off',
    'sonarjs/no-all-duplicated-branches': 'off',
    'sonarjs/no-collapsible-if': 'off',
    'sonarjs/no-collection-size-mischeck': 'off',
    'sonarjs/no-empty-collection': 'off',
    'sonarjs/no-identical-conditions': 'off',
    'sonarjs/no-identical-expressions': 'off',
    'sonarjs/no-inverted-boolean-check': 'off',
    'sonarjs/no-ignored-return': 'off',
    'sonarjs/no-identical-functions': 'off',
    'sonarjs/no-redundant-boolean': 'off',
    'sonarjs/no-redundant-jump': 'off',
    'sonarjs/no-unused-collection': 'off',
    'sonarjs/no-useless-catch': 'off',
    'sonarjs/prefer-object-literal': 'off',
    'sonarjs/prefer-single-boolean-return': 'off',
    'sonarjs/no-use-of-empty-return-value': 'off',
    'sonarjs/no-gratuitous-expressions': 'off',
    'sonarjs/no-duplicate-string': 'off',
    /**
     * plugin:simple-import-sort
     */
    'simple-import-sort/imports': 'off',
    'simple-import-sort/exports': 'off',
    /**
     * plugin:typescript-eslint
     */
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': ['off', { argsIgnorePattern: '^_' }],
    '@typescript-eslint/adjacent-overload-signatures': 'off',
    '@typescript-eslint/array-type': ['off', { default: 'array-simple' }],
    '@typescript-eslint/ban-types': [
      'off',
      {
        types: {
          Object: {
            message: 'Avoid using the `Object` type. Did you mean `object`?',
          },
          Function: {
            message:
              'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.',
          },
          Boolean: {
            message: 'Avoid using the `Boolean` type. Did you mean `boolean`?',
            fixWith: 'boolean',
          },
          Number: {
            message: 'Avoid using the `Number` type. Did you mean `number`?',
            fixWith: 'number',
          },
          Symbol: {
            message: 'Avoid using the `Symbol` type. Did you mean `symbol`?',
            fixWith: 'symbol',
          },
          String: {
            message: 'Avoid using the `String` type. Did you mean `string`?',
            fixWith: 'string',
          },
          '{}': {
            message: 'Use Record<K, V> instead',
            fixWith: 'Record<K, V>',
          },
          object: {
            message: 'Use Record<K, V> instead',
            fixWith: 'Record<K, V>',
          },
        },
      },
    ],
    '@typescript-eslint/explicit-member-accessibility': [
      'off',
      {
        overrides: {
          constructors: 'off',
        },
      },
    ],
    // '@typescript-eslint/indent': 'off',
    '@typescript-eslint/member-delimiter-style': [
      'off',
      {
        multiline: {
          delimiter: 'semi',
          requireLast: true,
        },
        singleline: {
          delimiter: 'semi',
          requireLast: false,
        },
      },
    ],
    '@typescript-eslint/member-ordering': 'off',
    '@typescript-eslint/no-angle-bracket-type-assertion': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-inferrable-types': 'off',
    '@typescript-eslint/await-thenable': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/ban-tslint-comment': 'off',
    '@typescript-eslint/consistent-indexed-object-style': 'off',
    '@typescript-eslint/consistent-type-definitions': ['off', 'interface'],
    '@typescript-eslint/consistent-type-imports': ['off', { prefer: 'type-imports' }],
    '@typescript-eslint/no-misused-new': 'off',
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-unsafe-call': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
    '@typescript-eslint/restrict-template-expressions': 'off',
    '@typescript-eslint/no-require-imports': 'off',
    'keyword-spacing': 'off',
    '@typescript-eslint/keyword-spacing': 'off',
    '@typescript-eslint/no-namespace': 'off',
    '@typescript-eslint/no-this-alias': 'off',
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/no-use-before-declare': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/prefer-for-of': 'off',
    '@typescript-eslint/prefer-function-type': 'off',
    '@typescript-eslint/prefer-namespace-keyword': 'off',
    '@typescript-eslint/quotes': [
      'off',
      'single',
      {
        avoidEscape: true,
      },
    ],
    '@typescript-eslint/semi': ['off', 'always'],
    '@typescript-eslint/naming-convention': [
      'off',
      {
        selector: 'default',
        format: ['camelCase', 'PascalCase', 'snake_case', 'UPPER_CASE'],
        filter: {
          regex: '^_.*$',
          match: false,
        },
      },
      {
        selector: 'variable',
        format: ['camelCase', 'UPPER_CASE'],
      },
      {
        selector: 'interface',
        format: ['PascalCase'],
        prefix: ['I'],
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
      },
      {
        selector: 'memberLike',
        modifiers: ['private'],
        format: ['camelCase'],
        leadingUnderscore: 'forbid',
      },
      {
        selector: 'variable',
        types: ['boolean'],
        format: ['PascalCase'],
        prefix: ['is', 'should', 'has', 'can', 'did', 'will'],
      },
    ],
    '@typescript-eslint/type-annotation-spacing': 'off',
    '@typescript-eslint/unified-signatures': 'off',
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/no-duplicate-imports': ['off'],
    '@typescript-eslint/no-shadow': 'off',
    '@typescript-eslint/no-unused-expressions': ['off'],
    /**
     * plugin:eslint
     */
    'no-await-in-loop': 'off',
    'padding-line-between-statements': [
      'off',
      { blankLine: 'always', prev: '*', next: 'return' },
      { blankLine: 'always', prev: '*', next: 'try' },
      { blankLine: 'always', prev: 'try', next: '*' },
      { blankLine: 'always', prev: '*', next: 'block-like' },
      { blankLine: 'always', prev: 'block-like', next: '*' },
      { blankLine: 'always', prev: '*', next: 'throw' },
      { blankLine: 'always', prev: 'var', next: '*' },
    ],
    'arrow-body-style': 'off',
    'arrow-parens': ['off', 'always'],
    complexity: 'off',
    'no-restricted-imports': [
      'off',
      {
        paths: [
          {
            name: 'rxjs/Rx',
            message: "Please import directly from 'rxjs' instead",
          },
        ],
      },
    ],
    'object-curly-spacing': ['off', 'always'],
    'no-multi-spaces': 'off',
    'no-useless-return': 'off',
    'no-else-return': 'off',
    'no-implicit-coercion': 'off',
    'constructor-super': 'off',
    yoda: 'off',
    strict: ['off', 'never'],
    curly: 'off',
    'dot-notation': 'off',
    'eol-last': 'off',
    eqeqeq: ['off', 'smart'],
    'guard-for-in': 'off',
    'id-match': 'off',
    'max-classes-per-file': ['off', 2],
    'max-len': [
      'off',
      {
        code: 150,
      },
    ],
    'new-parens': 'off',
    'no-bitwise': 'off',
    'no-caller': 'off',
    'no-cond-assign': 'off',
    'no-constant-condition': 'off',
    'no-dupe-else-if': 'off',
    'lines-between-class-members': ['off', 'always'],
    'no-console': [
      'off',
      {
        allow: [
          'info',
          'dirxml',
          'warn',
          'off',
          'dir',
          'timeLog',
          'assert',
          'clear',
          'count',
          'countReset',
          'group',
          'groupCollapsed',
          'groupEnd',
          'table',
          'Console',
          'markTimeline',
          'profile',
          'profileEnd',
          'timeline',
          'timelineEnd',
          'timeStamp',
          'context',
        ],
      },
    ],
    'no-debugger': 'off',
    'no-duplicate-case': 'off',
    'no-duplicate-imports': 'off',
    'no-empty': 'off',
    'no-eval': 'off',
    'no-extra-bind': 'off',
    'no-fallthrough': 'off',
    'no-invalid-this': 'off',
    'no-irregular-whitespace': 'off',
    'no-multiple-empty-lines': [
      'off',
      {
        max: 1,
      },
    ],
    'no-new-func': 'off',
    'no-new-wrappers': 'off',
    'no-redeclare': 'off',
    'no-return-await': 'off',
    'no-sequences': 'off',
    'no-sparse-arrays': 'off',
    'no-template-curly-in-string': 'off',
    'no-shadow': 'off',
    'no-throw-literal': 'off',
    'no-trailing-spaces': 'off',
    'no-undef-init': 'off',
    'no-unsafe-finally': 'off',
    'no-unused-expressions': 'off',
    'no-unused-labels': 'off',
    'no-var': 'off',
    'object-shorthand': 'off',
    'prefer-const': 'off',
    'prefer-object-spread': 'off',
    'quote-props': ['off', 'consistent-as-needed'],
    radix: 'off',
    'use-isnan': 'off',
    'valid-typeof': 'off',
    'space-before-function-paren': 'off',
    /**
     * plugin:unicorn
     */
    'unicorn/better-regex': 'off',
    'unicorn/catch-off-name': 'off',
    'unicorn/consistent-destructuring': 'off',
    'unicorn/consistent-function-scoping': 'off',
    'unicorn/custom-off-definition': 'off',
    'unicorn/empty-brace-spaces': 'off',
    'unicorn/off-message': 'off',
    'unicorn/escape-case': 'off',
    'unicorn/expiring-todo-comments': 'off',
    'unicorn/explicit-length-check': 'off',
    'unicorn/filename-case': [
      'off',
      {
        cases: {
          kebabCase: true,
          pascalCase: true,
        },
      },
    ],
    'unicorn/import-index': 'off',
    'unicorn/import-style': 'off',
    'unicorn/new-for-builtins': 'off',
    'unicorn/no-abusive-eslint-disable': 'off',
    'unicorn/no-array-callback-reference': 'off',
    'unicorn/no-array-for-each': 'off',
    'unicorn/no-array-push-push': 'off',
    'unicorn/no-array-reduce': 'off',
    'unicorn/no-console-spaces': 'off',
    'unicorn/no-document-cookie': 'off',
    'unicorn/no-for-loop': 'off',
    'unicorn/no-hex-escape': 'off',
    'unicorn/no-instanceof-array': 'off',
    'unicorn/no-keyword-prefix': 'off',
    'unicorn/no-lonely-if': 'off',
    'no-nested-ternary': 'off',
    'unicorn/no-nested-ternary': 'off',
    'unicorn/no-new-array': 'off',
    'unicorn/no-new-buffer': 'off',
    'unicorn/no-null': 'off',
    'unicorn/no-object-as-default-parameter': 'off',
    'unicorn/no-process-exit': 'off',
    'unicorn/no-static-only-class': 'off',
    'unicorn/no-this-assignment': 'off',
    'unicorn/no-unreadable-array-destructuring': 'off',
    'unicorn/no-unsafe-regex': 'off',
    'unicorn/no-unused-properties': 'off',
    'unicorn/no-useless-undefined': 'off',
    'unicorn/no-zero-fractions': 'off',
    'unicorn/number-literal-case': 'off',
    'unicorn/numeric-separators-style': 'off',
    'unicorn/prefer-add-event-listener': 'off',
    'unicorn/prefer-array-find': 'off',
    'unicorn/prefer-array-flat': 'off',
    'unicorn/prefer-array-flat-map': 'off',
    'unicorn/prefer-array-index-of': 'off',
    'unicorn/prefer-array-some': 'off',
    'unicorn/prefer-date-now': 'off',
    'unicorn/prefer-default-parameters': 'off',
    'unicorn/prefer-dom-node-append': 'off',
    'unicorn/prefer-dom-node-dataset': 'off',
    'unicorn/prefer-dom-node-remove': 'off',
    'unicorn/prefer-dom-node-text-content': 'off',
    'unicorn/prefer-includes': 'off',
    'unicorn/prefer-keyboard-event-key': 'off',
    'unicorn/prefer-math-trunc': 'off',
    'unicorn/prefer-modern-dom-apis': 'off',
    'unicorn/prefer-module': 'off',
    'unicorn/prefer-negative-index': 'off',
    'unicorn/prefer-node-protocol': 'off',
    'unicorn/prefer-number-properties': 'off',
    'unicorn/prefer-optional-catch-binding': 'off',
    'unicorn/prefer-reflect-apply': 'off',
    'unicorn/prefer-regexp-test': 'off',
    'unicorn/prefer-set-has': 'off',
    'unicorn/prefer-spread': 'off',
    'unicorn/prefer-string-replace-all': 'off',
    'unicorn/prefer-string-slice': 'off',
    'unicorn/prefer-string-starts-ends-with': 'off',
    'unicorn/prefer-string-trim-start-end': 'off',
    'unicorn/prefer-switch': 'off',
    'unicorn/prefer-ternary': 'off',
    'unicorn/prefer-type-off': 'off',
    'unicorn/prevent-abbreviations': 'off',
    'unicorn/string-content': 'off',
    'unicorn/throw-new-off': 'off',
  },
};
